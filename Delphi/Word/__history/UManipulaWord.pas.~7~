unit UManipulaWord;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf,
  FireDAC.Stan.Def, FireDAC.Phys, FireDAC.Stan.Param, FireDAC.DatS,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, FireDAC.Stan.Pool, FireDAC.Phys.FB,
  FireDAC.Phys.FBDef, FireDAC.VCLUI.Wait;

type
  TForm1 = class(TForm)
    Label1: TLabel;
    Label2: TLabel;
    edContrato: TEdit;
    edData: TEdit;
    Label3: TLabel;
    edGrupo: TEdit;
    Button1: TButton;
    Label4: TLabel;
    edArquivo: TEdit;
    Label5: TLabel;
    Label6: TLabel;
    edNumRef: TEdit;
    edCliente: TEdit;
    Label7: TLabel;
    edCredito: TEdit;
    Label8: TLabel;
    edModelo: TEdit;
    FDQuery1: TFDQuery;
    Button2: TButton;
    edDocumento: TEdit;
    Label9: TLabel;
    OpenDialog: TOpenDialog;
    FDConnection1: TFDConnection;
    Button3: TButton;
    SaveDialog: TSaveDialog;
    ckPDF: TCheckBox;
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
  private
    procedure ConvertDocToPdf(arquivo : String);
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation
uses
  System.Win.ComObj;

{$R *.dfm}

procedure TForm1.Button1Click(Sender: TObject);
var
  WordApp: Variant;
  Documento, pdf: Olevariant;
begin
  WordApp:= CreateOleObject('Word.Application');
  try
    WordApp.Visible := False;
    Documento := WordApp.Documents.Open('C:\Source\Livre\copia\arquivo01.doc');

    Documento.Content.Find.Execute(FindText := '[CONTRATO]', ReplaceWith := edContrato.Text);
    Documento.Content.Find.Execute(FindText := '[DTCO]', ReplaceWith := edData.Text);
    Documento.Content.Find.Execute(FindText := '[GRUPO]', ReplaceWith := edGrupo.Text);
    Documento.Content.Find.Execute(FindText := '[NUMREF]', ReplaceWith := edNumRef.Text);
    Documento.Content.Find.Execute(FindText := '[CLIENTE]', ReplaceWith := edCliente.Text);
    Documento.Content.Find.Execute(FindText := '[CREDITO]', ReplaceWith := edCredito.Text);
    Documento.Content.Find.Execute(FindText := '[BEM]', ReplaceWith := edModelo.Text);

    Documento.SaveAs(edArquivo.text);
  finally
    WordApp.Quit;
  end;
  ConvertDocToPdf(edArquivo.text);
end;

procedure TForm1.Button2Click(Sender: TObject);
begin
  if OpenDialog.Execute then
  begin
    with FDQuery1.SQL do
    begin
      Clear;
      Add('insert into CP_DOC_WORD');
      Add(' (id, documento, arquivo, user_cad)');
      Add('values');
      Add(' (gen_id(GN_CP_DOC_WORD,1), :documento, :arquivo, :user_cad)');
    end;
    with FDQuery1 do
    begin
      ParamByName('arquivo').DataType := ftOraBlob;
      ParamByName('arquivo').LoadFromFile(OpenDialog.FileName, ftOraBlob);
      //ParamByName('xml').AsStream := TStringStream.Create(xml, TEncoding.UTF8);
      ParamByName('documento').AsString := edDocumento.Text;
      ParamByName('user_cad').AsInteger := -1;
    end;
    FDQuery1.ExecSQL;
  end;
end;

procedure TForm1.Button3Click(Sender: TObject);
begin
  FDQuery1.Open('select * from CP_DOC_WORD');
  FDQuery1.First;
  while not FDQuery1.Eof do
  begin
    if SaveDialog.Execute then
      TBlobField(FDQuery1.FieldByName('arquivo')).SaveToFile(SaveDialog.FileName);
    FDQuery1.Next;
  end;

end;

procedure TForm1.ConvertDocToPdf(arquivo: String);
var
  Word, Doc: OleVariant;
begin
  Word := CreateOLEObject('Word.Application');
  Doc := Word.Documents.Open(arquivo);
  Doc.ExportAsFixedFormat('C:\Source\Livre\copia\arquivo.pdf', 17);
end;


end.
